{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "latex_envs": {
      "bibliofile": "biblio.bib",
      "cite_by": "apalike",
      "current_citInitial": 1,
      "eqLabelWithNumbers": true,
      "eqNumInitial": 0
    },
    "colab": {
      "name": "so-bot.ipynb",
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kapikapi/sobot/blob/master/thread_embeddings_by_tags/c_cpp.pkl\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ahVWfzT23dMk",
        "colab_type": "text"
      },
      "source": [
        "# Final project: StackOverflow assistant bot\n",
        "\n",
        "Congratulations on coming this far and solving the programming assignments! In this final project, we will combine everything we have learned about Natural Language Processing to construct a *dialogue chat bot*, which will be able to:\n",
        "* answer programming-related questions (using StackOverflow dataset);\n",
        "* chit-chat and simulate dialogue on all non programming-related questions.\n",
        "\n",
        "For a chit-chat mode we will use a pre-trained neural network engine available from [ChatterBot](https://github.com/gunthercox/ChatterBot).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rPuCadvK3dMm",
        "colab_type": "text"
      },
      "source": [
        "### Data description\n",
        "\n",
        "To detect *intent* of users questions we will need two text collections:\n",
        "- `tagged_posts.tsv` — StackOverflow posts, tagged with one programming language (*positive samples*).\n",
        "- `dialogues.tsv` — dialogue phrases from movie subtitles (*negative samples*).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P_L8upc-3dMo",
        "colab_type": "text"
      },
      "source": [
        "For those questions, that have programming-related intent, we will proceed as follow predict programming language (only one tag per question allowed here) and rank candidates within the tag using embeddings.\n",
        "For the ranking part, you will need:\n",
        "- `word_embeddings.tsv` — word embeddings, that you  trained with StarSpace in the 3rd assignment. It's not a problem if you didn't do it, because we can offer an alternative solution for you."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "koZMOKwc3dMq",
        "colab_type": "text"
      },
      "source": [
        "As a result of this notebook, you should obtain the following new objects that you will then use in the running bot:\n",
        "\n",
        "- `intent_recognizer.pkl` — intent recognition model;\n",
        "- `tag_classifier.pkl` — programming language classification model;\n",
        "- `tfidf_vectorizer.pkl` — vectorizer used during training;\n",
        "- `thread_embeddings_by_tags` — folder with thread embeddings, arranged by tags.\n",
        "    "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SEOvTr053dMr",
        "colab_type": "text"
      },
      "source": [
        "Some functions will be reused by this notebook and the scripts, so we put them into *utils.py* file. Don't forget to open it and fill in the gaps!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lY1VlVOc3dMs",
        "colab_type": "text"
      },
      "source": [
        "## Part I. Intent and language recognition"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j9ufXb353dMt",
        "colab_type": "text"
      },
      "source": [
        "We want to write a bot, which will not only **answer programming-related questions**, but also will be able to **maintain a dialogue**. We would also like to detect the *intent* of the user from the question (we could have had a 'Question answering mode' check-box in the bot, but it wouldn't fun at all, would it?). So the first thing we need to do is to **distinguish programming-related questions from general ones**.\n",
        "\n",
        "It would also be good to predict which programming language a particular question referees to. By doing so, we will speed up question search by a factor of the number of languages (10 here), and exercise our *text classification* skill a bit. :)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HmbIS3yW5e63",
        "colab_type": "text"
      },
      "source": [
        "### Imports and installations"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d_BEcD943vyi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "5e9d279a-a648-4511-f423-c0a358293f92"
      },
      "source": [
        "pip install -q tf-nightly"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[K     |████████████████████████████████| 324.7MB 52kB/s \n",
            "\u001b[K     |████████████████████████████████| 6.8MB 50.4MB/s \n",
            "\u001b[K     |████████████████████████████████| 460kB 58.8MB/s \n",
            "\u001b[?25h"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j_9iuXyn4oH6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 177
        },
        "outputId": "961a3422-3467-4b18-ebf7-100f31104e82"
      },
      "source": [
        "!pip install -q tf-models-nightly"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[K     |████████████████████████████████| 880kB 4.8MB/s \n",
            "\u001b[K     |████████████████████████████████| 102kB 11.7MB/s \n",
            "\u001b[K     |████████████████████████████████| 174kB 24.7MB/s \n",
            "\u001b[K     |████████████████████████████████| 1.1MB 14.1MB/s \n",
            "\u001b[K     |████████████████████████████████| 358kB 40.0MB/s \n",
            "\u001b[K     |████████████████████████████████| 36.4MB 77kB/s \n",
            "\u001b[K     |████████████████████████████████| 296kB 39.9MB/s \n",
            "\u001b[?25h  Building wheel for py-cpuinfo (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for seqeval (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gf9Plc-r25_3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "9e4face7-f590-4e2c-cffc-c9d8903df20c"
      },
      "source": [
        "!pip install chatterbot"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting chatterbot\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/6c/0e/dac0d82f34f86bf509cf5ef3e2dfc5aa7d444bd843a2330ceb7d854f84f2/ChatterBot-1.0.5-py2.py3-none-any.whl (67kB)\n",
            "\r\u001b[K     |████▉                           | 10kB 24.4MB/s eta 0:00:01\r\u001b[K     |█████████▋                      | 20kB 4.2MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 30kB 5.5MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 40kB 5.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 51kB 4.8MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 61kB 5.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 71kB 4.0MB/s \n",
            "\u001b[?25hRequirement already satisfied: pymongo<4.0,>=3.3 in /usr/local/lib/python3.6/dist-packages (from chatterbot) (3.10.1)\n",
            "Collecting pyyaml<5.2,>=5.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e3/e8/b3212641ee2718d556df0f23f78de8303f068fe29cdaa7a91018849582fe/PyYAML-5.1.2.tar.gz (265kB)\n",
            "\u001b[K     |████████████████████████████████| 266kB 18.9MB/s \n",
            "\u001b[?25hCollecting pint>=0.8.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/66/a9/18b232462dee45443994b19254cf6fe49893ea81bc7534cb984932d59e38/Pint-0.14-py2.py3-none-any.whl (197kB)\n",
            "\u001b[K     |████████████████████████████████| 204kB 30.7MB/s \n",
            "\u001b[?25hRequirement already satisfied: nltk<4.0,>=3.2 in /usr/local/lib/python3.6/dist-packages (from chatterbot) (3.2.5)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from chatterbot) (2018.9)\n",
            "Collecting mathparse<0.2,>=0.1\n",
            "  Downloading https://files.pythonhosted.org/packages/c3/e5/4910fb85950cb960fcf3f5aabe1c8e55f5c9201788a1c1302b570a7e1f84/mathparse-0.1.2-py3-none-any.whl\n",
            "Collecting spacy<2.2,>=2.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/41/5b/e07dd3bf104237bce4b398558b104c8e500333d6f30eabe3fa9685356b7d/spacy-2.1.9-cp36-cp36m-manylinux1_x86_64.whl (30.8MB)\n",
            "\u001b[K     |████████████████████████████████| 30.9MB 88kB/s \n",
            "\u001b[?25hCollecting python-dateutil<2.8,>=2.7\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/74/68/d87d9b36af36f44254a8d512cbfc48369103a3b9e474be9bdfe536abfc45/python_dateutil-2.7.5-py2.py3-none-any.whl (225kB)\n",
            "\u001b[K     |████████████████████████████████| 235kB 50.2MB/s \n",
            "\u001b[?25hCollecting sqlalchemy<1.3,>=1.2\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f9/67/d07cf7ac7e6dd0bc55ba62816753f86d7c558107104ca915e730c9ec2512/SQLAlchemy-1.2.19.tar.gz (5.7MB)\n",
            "\u001b[K     |████████████████████████████████| 5.7MB 48.6MB/s \n",
            "\u001b[?25hRequirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from pint>=0.8.1->chatterbot) (1.7.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from pint>=0.8.1->chatterbot) (49.1.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.6/dist-packages (from pint>=0.8.1->chatterbot) (20.4)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from nltk<4.0,>=3.2->chatterbot) (1.15.0)\n",
            "Requirement already satisfied: wasabi<1.1.0,>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from spacy<2.2,>=2.1->chatterbot) (0.7.1)\n",
            "Collecting preshed<2.1.0,>=2.0.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/20/93/f222fb957764a283203525ef20e62008675fd0a14ffff8cc1b1490147c63/preshed-2.0.1-cp36-cp36m-manylinux1_x86_64.whl (83kB)\n",
            "\u001b[K     |████████████████████████████████| 92kB 13.7MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.6/dist-packages (from spacy<2.2,>=2.1->chatterbot) (1.18.5)\n",
            "Collecting blis<0.3.0,>=0.2.2\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/34/46/b1d0bb71d308e820ed30316c5f0a017cb5ef5f4324bcbc7da3cf9d3b075c/blis-0.2.4-cp36-cp36m-manylinux1_x86_64.whl (3.2MB)\n",
            "\u001b[K     |████████████████████████████████| 3.2MB 47.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from spacy<2.2,>=2.1->chatterbot) (2.0.3)\n",
            "Collecting plac<1.0.0,>=0.9.6\n",
            "  Downloading https://files.pythonhosted.org/packages/9e/9b/62c60d2f5bc135d2aa1d8c8a86aaf84edb719a59c7f11a4316259e61a298/plac-0.9.6-py2.py3-none-any.whl\n",
            "Collecting thinc<7.1.0,>=7.0.8\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/18/a5/9ace20422e7bb1bdcad31832ea85c52a09900cd4a7ce711246bfb92206ba/thinc-7.0.8-cp36-cp36m-manylinux1_x86_64.whl (2.1MB)\n",
            "\u001b[K     |████████████████████████████████| 2.1MB 46.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.6/dist-packages (from spacy<2.2,>=2.1->chatterbot) (1.0.2)\n",
            "Requirement already satisfied: srsly<1.1.0,>=0.0.6 in /usr/local/lib/python3.6/dist-packages (from spacy<2.2,>=2.1->chatterbot) (1.0.2)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.6/dist-packages (from spacy<2.2,>=2.1->chatterbot) (2.23.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata; python_version < \"3.8\"->pint>=0.8.1->chatterbot) (3.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from packaging->pint>=0.8.1->chatterbot) (2.4.7)\n",
            "Requirement already satisfied: tqdm<5.0.0,>=4.10.0 in /usr/local/lib/python3.6/dist-packages (from thinc<7.1.0,>=7.0.8->spacy<2.2,>=2.1->chatterbot) (4.41.1)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy<2.2,>=2.1->chatterbot) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy<2.2,>=2.1->chatterbot) (2020.6.20)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy<2.2,>=2.1->chatterbot) (3.0.4)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy<2.2,>=2.1->chatterbot) (1.24.3)\n",
            "Building wheels for collected packages: pyyaml, sqlalchemy\n",
            "  Building wheel for pyyaml (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyyaml: filename=PyYAML-5.1.2-cp36-cp36m-linux_x86_64.whl size=44104 sha256=2b50a8b6bffccb75adecc759fd7082b392f028cf9d56ffcc418ad6c1a624a496\n",
            "  Stored in directory: /root/.cache/pip/wheels/d9/45/dd/65f0b38450c47cf7e5312883deb97d065e030c5cca0a365030\n",
            "  Building wheel for sqlalchemy (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sqlalchemy: filename=SQLAlchemy-1.2.19-cp36-cp36m-linux_x86_64.whl size=1151172 sha256=fd7f5f0ec0ac58267e4ba032da5cfe07f4d7d037878debf35642bdf3da6b9920\n",
            "  Stored in directory: /root/.cache/pip/wheels/2c/90/a7/3b40c6cc468abff357b38fd075429920bd0d313659d889cf8a\n",
            "Successfully built pyyaml sqlalchemy\n",
            "\u001b[31mERROR: fbprophet 0.6 has requirement python-dateutil>=2.8.0, but you'll have python-dateutil 2.7.5 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: en-core-web-sm 2.2.5 has requirement spacy>=2.2.2, but you'll have spacy 2.1.9 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n",
            "Installing collected packages: pyyaml, pint, mathparse, preshed, blis, plac, thinc, spacy, python-dateutil, sqlalchemy, chatterbot\n",
            "  Found existing installation: PyYAML 3.13\n",
            "    Uninstalling PyYAML-3.13:\n",
            "      Successfully uninstalled PyYAML-3.13\n",
            "  Found existing installation: preshed 3.0.2\n",
            "    Uninstalling preshed-3.0.2:\n",
            "      Successfully uninstalled preshed-3.0.2\n",
            "  Found existing installation: blis 0.4.1\n",
            "    Uninstalling blis-0.4.1:\n",
            "      Successfully uninstalled blis-0.4.1\n",
            "  Found existing installation: plac 1.1.3\n",
            "    Uninstalling plac-1.1.3:\n",
            "      Successfully uninstalled plac-1.1.3\n",
            "  Found existing installation: thinc 7.4.0\n",
            "    Uninstalling thinc-7.4.0:\n",
            "      Successfully uninstalled thinc-7.4.0\n",
            "  Found existing installation: spacy 2.2.4\n",
            "    Uninstalling spacy-2.2.4:\n",
            "      Successfully uninstalled spacy-2.2.4\n",
            "  Found existing installation: python-dateutil 2.8.1\n",
            "    Uninstalling python-dateutil-2.8.1:\n",
            "      Successfully uninstalled python-dateutil-2.8.1\n",
            "  Found existing installation: SQLAlchemy 1.3.18\n",
            "    Uninstalling SQLAlchemy-1.3.18:\n",
            "      Successfully uninstalled SQLAlchemy-1.3.18\n",
            "Successfully installed blis-0.2.4 chatterbot-1.0.5 mathparse-0.1.2 pint-0.14 plac-0.9.6 preshed-2.0.1 python-dateutil-2.7.5 pyyaml-5.1.2 spacy-2.1.9 sqlalchemy-1.2.19 thinc-7.0.8\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "dateutil"
                ]
              }
            }
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UO2AxSlZ3qHX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "90e53f6b-771b-4ea6-86f5-36daf2eb2410"
      },
      "source": [
        "!pip install chatterbot_corpus"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: chatterbot_corpus in /usr/local/lib/python3.6/dist-packages (1.2.0)\n",
            "Requirement already satisfied: PyYAML<4.0,>=3.12 in /usr/local/lib/python3.6/dist-packages (from chatterbot_corpus) (3.13)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MBZFt2uJ3dMu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "d16c581f-d88c-491c-ebf7-f5ccc7394f77"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import pickle\n",
        "import os\n",
        "import re\n",
        "import matplotlib.pyplot as plt\n",
        "from collections import Counter, OrderedDict\n",
        "import json\n",
        "\n",
        "import nltk\n",
        "from nltk.stem import WordNetLemmatizer \n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.multiclass import OneVsRestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics.pairwise import cosine_similarity, pairwise_distances_argmin\n",
        "\n",
        "from xgboost import XGBClassifier"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uYoNON7S3dMy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.layers import Dense, Input, LSTM, Embedding, Dropout, Bidirectional, Input\n",
        "from tensorflow.keras.models import Sequential, load_model, Model\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from tensorflow.keras.metrics import AUC, Precision, Recall"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TWfwE3p13dM1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "e19408f4-8a52-439e-f5a9-740f64d86a97"
      },
      "source": [
        "tf.__version__"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'2.4.0-dev20200724'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mu-a8vr2dUW1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from chatterbot import ChatBot\n",
        "from chatterbot.trainers import ChatterBotCorpusTrainer"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1rHoA23d3dM7",
        "colab_type": "text"
      },
      "source": [
        "### Util functions and constants"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gyef_t_i3dM8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "RESOURCE_PATH = {\n",
        "    'INTENT_RECOGNIZER': 'intent_recognizer.pkl',\n",
        "    'TAG_CLASSIFIER': 'tag_classifier.pkl',\n",
        "    'TFIDF_VECTORIZER': 'tfidf_vectorizer.pkl',\n",
        "    'THREAD_EMBEDDINGS_FOLDER': 'thread_embeddings_by_tags',\n",
        "    'WORD_EMBEDDINGS': 'data/word_embeddings.tsv',\n",
        "    'TAG_LABEL_ENCODER': 'tag_label_encoder.pkl',\n",
        "    'TITLE_TOKENIZER': 'title_tokenizer.pkl'\n",
        "}"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sz-wXBrp3dNB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "lemmatizer = WordNetLemmatizer() "
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "10nuEHW33dNH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def text_prepare(text):\n",
        "    \"\"\"Performs tokenization and simple preprocessing.\"\"\"\n",
        "    replace_by_space_re = re.compile('[/(){}\\[\\]\\|@,;]')\n",
        "    good_symbols_re = re.compile('[^0-9a-z #+_]')\n",
        "    stopwords_set = set(stopwords.words('english'))\n",
        "\n",
        "    text = text.lower()\n",
        "    text = replace_by_space_re.sub(' ', text)\n",
        "    text = good_symbols_re.sub('', text)\n",
        "    text = ' '.join([lemmatizer.lemmatize(x) for x in text.split() if x and x not in stopwords_set])\n",
        "\n",
        "    return text.strip()"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cs5HIsZP3dNK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def unpickle_file(filename):\n",
        "    \"\"\"Returns the result of unpickling the file content.\"\"\"\n",
        "    with open(filename, 'rb') as f:\n",
        "        return pickle.load(f)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dZYQ-bsk3dNN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plot_counter(counter_dict, y_label, title):\n",
        "    sorted_counter = OrderedDict(counter_dict.most_common())\n",
        "    plt.bar(sorted_counter.keys(), sorted_counter.values())\n",
        "    plt.ylabel('Count')\n",
        "    plt.xlabel(y_label)\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.title(title);"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4KwCvSDJ3dNQ",
        "colab_type": "text"
      },
      "source": [
        "### Data preparation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pkTtT79h3dNQ",
        "colab_type": "text"
      },
      "source": [
        "Now, load examples of two classes. Use a subsample of stackoverflow data to balance the classes. You will need the full data later."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "07krgMjp3dNR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dialogue_df = pd.read_csv('dialogues.tsv', sep='\\t')"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VzSgd8b05pzJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "stackoverflow_df = pd.read_csv('tagged_posts.tsv', sep='\\t')"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "is0QdxcK3dNT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "0ddba307-c7d2-4b2f-fa63-23326627741e"
      },
      "source": [
        "print('Dialogue dataset has shape', dialogue_df.shape)\n",
        "print('Stackoverflow dataset has shape', stackoverflow_df.shape)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Dialogue dataset has shape (218609, 2)\n",
            "Stackoverflow dataset has shape (2171575, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PLAMY8c13dNX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sample_size = dialogue_df.shape[0]\n",
        "stackoverflow_df_s = pd.read_csv('tagged_posts.tsv', sep='\\t').sample(sample_size, random_state=0)"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "suA6sEyd3dNZ",
        "colab_type": "code",
        "colab": {},
        "outputId": "019d0667-3746-425f-c2c0-b98efcdb8469"
      },
      "source": [
        "print('Smaller stackoverflow dataset has shape', stackoverflow_df_s.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Smaller stackoverflow dataset has shape (218609, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Va9LAF3p3dNb",
        "colab_type": "text"
      },
      "source": [
        "Check how the data look like:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "eXeVPSMr3dNb",
        "colab_type": "code",
        "colab": {},
        "outputId": "113342de-dcb1-4382-873f-1f92c09b6bed"
      },
      "source": [
        "dialogue_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>tag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Okay -- you're gonna need to learn how to lie.</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>I'm kidding.  You know how sometimes you just ...</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Like my fear of wearing pastels?</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>I figured you'd get to the good stuff eventually.</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Thank God!  If I had to hear one more story ab...</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                text       tag\n",
              "0     Okay -- you're gonna need to learn how to lie.  dialogue\n",
              "1  I'm kidding.  You know how sometimes you just ...  dialogue\n",
              "2                   Like my fear of wearing pastels?  dialogue\n",
              "3  I figured you'd get to the good stuff eventually.  dialogue\n",
              "4  Thank God!  If I had to hear one more story ab...  dialogue"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bkp3h2lI3dNe",
        "colab_type": "code",
        "colab": {},
        "outputId": "3af12cd3-1d8c-4947-8ed9-47b050e32c25"
      },
      "source": [
        "stackoverflow_df_s.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>post_id</th>\n",
              "      <th>title</th>\n",
              "      <th>tag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2168983</th>\n",
              "      <td>43837842</td>\n",
              "      <td>Efficient Algorithm to compose valid expressio...</td>\n",
              "      <td>python</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1084095</th>\n",
              "      <td>15747223</td>\n",
              "      <td>Why does this basic thread program fail with C...</td>\n",
              "      <td>c_cpp</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1049020</th>\n",
              "      <td>15189594</td>\n",
              "      <td>Link to scroll to top not working</td>\n",
              "      <td>javascript</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200466</th>\n",
              "      <td>3273927</td>\n",
              "      <td>Is it possible to implement ping on windows ph...</td>\n",
              "      <td>c#</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1200249</th>\n",
              "      <td>17684551</td>\n",
              "      <td>GLSL normal mapping issue</td>\n",
              "      <td>c_cpp</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          post_id                                              title  \\\n",
              "2168983  43837842  Efficient Algorithm to compose valid expressio...   \n",
              "1084095  15747223  Why does this basic thread program fail with C...   \n",
              "1049020  15189594                  Link to scroll to top not working   \n",
              "200466    3273927  Is it possible to implement ping on windows ph...   \n",
              "1200249  17684551                          GLSL normal mapping issue   \n",
              "\n",
              "                tag  \n",
              "2168983      python  \n",
              "1084095       c_cpp  \n",
              "1049020  javascript  \n",
              "200466           c#  \n",
              "1200249       c_cpp  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nsJ6ZNPC3dNg",
        "colab_type": "text"
      },
      "source": [
        "Apply *text_prepare* function to preprocess the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FV5X-bLG3dNh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dialogue_df['text'] = [text_prepare(d) for d in dialogue_df['text']]\n",
        "stackoverflow_df_s['title'] = [text_prepare(t) for t in stackoverflow_df_s['title']]\n",
        "# stackoverflow_df['title'] = [text_prepare(t) for t in stackoverflow_df['title']]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L0KF5UlB3dNj",
        "colab_type": "code",
        "colab": {},
        "outputId": "c3b91c6c-6d06-4e98-ed6b-61e54187cbb2"
      },
      "source": [
        "dialogue_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>tag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>okay youre gonna need learn lie</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>im kidding know sometimes become persona dont ...</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>like fear wearing pastel</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>figured youd get good stuff eventually</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>thank god hear one story coiffure</td>\n",
              "      <td>dialogue</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                text       tag\n",
              "0                    okay youre gonna need learn lie  dialogue\n",
              "1  im kidding know sometimes become persona dont ...  dialogue\n",
              "2                           like fear wearing pastel  dialogue\n",
              "3             figured youd get good stuff eventually  dialogue\n",
              "4                  thank god hear one story coiffure  dialogue"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8Zyep02n3dNm",
        "colab_type": "code",
        "colab": {},
        "outputId": "7936db11-c799-4597-fa70-6ea95ebf902e"
      },
      "source": [
        "stackoverflow_df_s.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>post_id</th>\n",
              "      <th>title</th>\n",
              "      <th>tag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2168983</th>\n",
              "      <td>43837842</td>\n",
              "      <td>efficient algorithm compose valid expression s...</td>\n",
              "      <td>python</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1084095</th>\n",
              "      <td>15747223</td>\n",
              "      <td>basic thread program fail clang pas g++</td>\n",
              "      <td>c_cpp</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1049020</th>\n",
              "      <td>15189594</td>\n",
              "      <td>link scroll top working</td>\n",
              "      <td>javascript</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200466</th>\n",
              "      <td>3273927</td>\n",
              "      <td>possible implement ping window phone 7</td>\n",
              "      <td>c#</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1200249</th>\n",
              "      <td>17684551</td>\n",
              "      <td>glsl normal mapping issue</td>\n",
              "      <td>c_cpp</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          post_id                                              title  \\\n",
              "2168983  43837842  efficient algorithm compose valid expression s...   \n",
              "1084095  15747223            basic thread program fail clang pas g++   \n",
              "1049020  15189594                            link scroll top working   \n",
              "200466    3273927             possible implement ping window phone 7   \n",
              "1200249  17684551                          glsl normal mapping issue   \n",
              "\n",
              "                tag  \n",
              "2168983      python  \n",
              "1084095       c_cpp  \n",
              "1049020  javascript  \n",
              "200466           c#  \n",
              "1200249       c_cpp  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "flvolNH33dNo",
        "colab_type": "text"
      },
      "source": [
        "### Intent recognition"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0h8qCmMO3dNo",
        "colab_type": "text"
      },
      "source": [
        "We will do a binary classification on TF-IDF representations of texts. Labels will be either `dialogue` for general questions or `stackoverflow` for programming-related questions. First, prepare the data for this task:\n",
        "- concatenate `dialogue` and `stackoverflow` examples into one sample\n",
        "- split it into train and test in proportion 9:1, use *random_state=0* for reproducibility\n",
        "- transform it into TF-IDF features"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gUTiLLGL3dNo",
        "colab_type": "code",
        "colab": {},
        "outputId": "4347d2eb-6cad-44f8-ccda-9e106abd074d"
      },
      "source": [
        "X = np.concatenate([dialogue_df['text'].values, stackoverflow_df_s['title'].values])\n",
        "y = ['dialogue'] * dialogue_df.shape[0] + ['stackoverflow'] * stackoverflow_df_s.shape[0]\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.1)\n",
        "print('Train size = {}, test size = {}'.format(len(X_train), len(X_test)))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train size = 393496, test size = 43722\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4jRFy-ZW3dNq",
        "colab_type": "text"
      },
      "source": [
        "In the first assignment (Predict tags on StackOverflow with linear models), you have already learnt how to preprocess texts and do TF-IDF tranformations. Reuse your code here. In addition, you will also need to [dump](https://docs.python.org/3/library/pickle.html#pickle.dump) the TF-IDF vectorizer with pickle to use it later in the running bot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bz3lW7GP3dNr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def tfidf_features(X_train, X_test, vectorizer_path):\n",
        "    \"\"\"Performs TF-IDF transformation and dumps the model.\"\"\"\n",
        "    \n",
        "    vectorizer = TfidfVectorizer()\n",
        "    vectorizer.fit(X_train)\n",
        "    X_train_tf_idf = vectorizer.transform(X_train)\n",
        "    X_test_tf_idf = vectorizer.transform(X_test)\n",
        "    \n",
        "    pickle.dump(vectorizer, open(vectorizer_path, 'wb'))\n",
        "    \n",
        "    return X_train_tf_idf, X_test_tf_idf"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N5Finzw73dNt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train_tfidf, X_test_tfidf = tfidf_features(X_train, X_test, RESOURCE_PATH['TFIDF_VECTORIZER'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oqXmh3J73dNu",
        "colab_type": "code",
        "colab": {},
        "outputId": "b045b572-c866-4f43-b9a2-270bc27ee65a"
      },
      "source": [
        "X_train"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['going find time help fix roof',\n",
              "       'convert pixel data bitmap int array wp8 c#',\n",
              "       'feel like youre stuck train cant get cause youre marryin fella',\n",
              "       ..., 'think broke skin', 'action event null',\n",
              "       'get file path wpconfigphp wordpress site'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qvCOmOvw3dNw",
        "colab_type": "text"
      },
      "source": [
        "Train the **intent recognizer** using LogisticRegression on the train set with the following parameters: *penalty='l2'*, *C=10*, *random_state=0*. Print out the accuracy on the test set to check whether everything looks good."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r6MztQj03dNx",
        "colab_type": "code",
        "colab": {},
        "outputId": "65020d3f-0bda-49b0-a383-318c48c0ef74"
      },
      "source": [
        "lr_intent_model = LogisticRegression(random_state=0, penalty='l2', C=10, solver='lbfgs', max_iter=2000)\n",
        "lr_intent_model.fit(X_train_tfidf, y_train)\n",
        "y_test_pred_lr = lr_intent_model.predict(X_test_tfidf)\n",
        "test_accuracy_lr = accuracy_score(y_test, y_test_pred_lr)\n",
        "print('Test accuracy = {}'.format(test_accuracy_lr))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy = 0.9909656465852431\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6iXWat4n3dNz",
        "colab_type": "code",
        "colab": {},
        "outputId": "cacffa58-2a01-43c6-ca8a-4c83cd0cdde9"
      },
      "source": [
        "print(classification_report(y_test, y_test_pred_lr))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "               precision    recall  f1-score   support\n",
            "\n",
            "     dialogue       0.99      0.99      0.99     21963\n",
            "stackoverflow       0.99      0.99      0.99     21759\n",
            "\n",
            "     accuracy                           0.99     43722\n",
            "    macro avg       0.99      0.99      0.99     43722\n",
            " weighted avg       0.99      0.99      0.99     43722\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jhFm6f3q3dN1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "intent_recognizer = lr_intent_model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hOpqBOy73dN3",
        "colab_type": "text"
      },
      "source": [
        "Dump the classifier to use it in the running bot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ovUVJrDA3dN3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pickle.dump(intent_recognizer, open(RESOURCE_PATH['INTENT_RECOGNIZER'], 'wb'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a6y981f13dN5",
        "colab_type": "text"
      },
      "source": [
        "### Programming language classification "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nNEeaSxT3dN5",
        "colab_type": "text"
      },
      "source": [
        "We will train one more classifier for the programming-related questions. It will predict exactly one tag (=programming language) and will be also based on Logistic Regression with TF-IDF features. \n",
        "\n",
        "First, let us prepare the data for this task."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w2GNblug3dN6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_lc = stackoverflow_df_s['title'].values\n",
        "y_lc = stackoverflow_df_s['tag'].values"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-Vd2RP0N3dN8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "2435b6ed-49d5-43f6-e91d-97462dd3692b"
      },
      "source": [
        "tags_counter = Counter(y_lc)\n",
        "tags_counter.most_common()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('c#', 39733),\n",
              " ('java', 38374),\n",
              " ('javascript', 37930),\n",
              " ('php', 32524),\n",
              " ('c_cpp', 28331),\n",
              " ('python', 21025),\n",
              " ('ruby', 10027),\n",
              " ('vb', 3568),\n",
              " ('r', 3555),\n",
              " ('swift', 3542)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r0ldb7qs3dN-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 327
        },
        "outputId": "36b4ee27-08ba-432d-96de-2f86b47c6a56"
      },
      "source": [
        "plot_counter(tags_counter, 'Tags', 'Stackoverflow Tags Histogram')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bs1M9Lo_3dOA",
        "colab_type": "code",
        "colab": {},
        "outputId": "ff2f118c-3c2b-471b-8e9f-d942da01950a"
      },
      "source": [
        "X_train_lc, X_test_lc, y_train_lc, y_test_lc = train_test_split(X_lc, y_lc, test_size=0.2, random_state=0, stratify=y_lc)\n",
        "print('Train size = {}, test size = {}'.format(len(X_train), len(X_test)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train size = 393496, test size = 43722\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bBBvFWp13dOC",
        "colab_type": "code",
        "colab": {},
        "outputId": "b3eaeee7-c230-4219-be47-d23658096363"
      },
      "source": [
        "plot_counter(Counter(y_train_lc), 'Tags', 'Train Stackoverflow Tags Histogram')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pPVEgklj3dOE",
        "colab_type": "code",
        "colab": {},
        "outputId": "ddcf42ed-e387-4240-d721-be82ee913774"
      },
      "source": [
        "plot_counter(Counter(y_test_lc), 'Tags', 'Test Stackoverflow Tags Histogram')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WEmP7Jwp3dOG",
        "colab_type": "text"
      },
      "source": [
        "Let us reuse the TF-IDF vectorizer that we have already created above. It should not make a huge difference which data was used to train it."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rb6Ol9fV3dOG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "vectorizer = pickle.load(open(RESOURCE_PATH['TFIDF_VECTORIZER'], 'rb'))\n",
        "\n",
        "X_train_tfidf_lc, X_test_tfidf_lc = vectorizer.transform(X_train_lc), vectorizer.transform(X_test_lc)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TS-ZH8Pr3dOI",
        "colab_type": "code",
        "colab": {},
        "outputId": "f2229ffb-3069-4444-d7d1-00a7bc3b3ed0"
      },
      "source": [
        "y_train_lc"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['php', 'c#', 'python', ..., 'javascript', 'java', 'java'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yYJ9sf9K3dOK",
        "colab_type": "text"
      },
      "source": [
        "Train the **tag classifier** using OneVsRestClassifier wrapper over LogisticRegression. Use the following parameters: *penalty='l2'*, *C=5*, *random_state=0*."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TZBolrRo3dOL",
        "colab_type": "code",
        "colab": {},
        "outputId": "b43922e1-810a-4c6b-e2f2-3dd769b2a1ca"
      },
      "source": [
        "lr_bin_model = LogisticRegression(random_state=0, penalty='l2', C=5, solver='lbfgs', max_iter=1000)\n",
        "lr_lc_model = OneVsRestClassifier(lr_bin_model)\n",
        "lr_lc_model.fit(X_train_tfidf_lc, y_train_lc)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OneVsRestClassifier(estimator=LogisticRegression(C=5, class_weight=None,\n",
              "                                                 dual=False, fit_intercept=True,\n",
              "                                                 intercept_scaling=1,\n",
              "                                                 l1_ratio=None, max_iter=1000,\n",
              "                                                 multi_class='warn',\n",
              "                                                 n_jobs=None, penalty='l2',\n",
              "                                                 random_state=0, solver='lbfgs',\n",
              "                                                 tol=0.0001, verbose=0,\n",
              "                                                 warm_start=False),\n",
              "                    n_jobs=None)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DrsIP32_3dOP",
        "colab_type": "code",
        "colab": {},
        "outputId": "0e738214-2c07-4e75-8f60-192a05a0a8d6"
      },
      "source": [
        "y_test_pred_lc = lr_lc_model.predict(X_test_tfidf_lc)\n",
        "test_accuracy_lc = accuracy_score(y_test_lc, y_test_pred_lc)\n",
        "print('Test accuracy = {}'.format(test_accuracy_lc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy = 0.784410594208865\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "VfIFYepK3dOR",
        "colab_type": "code",
        "colab": {},
        "outputId": "122afb32-2db8-4001-bc34-2b57d0a691bf"
      },
      "source": [
        "print(classification_report(y_test_lc, y_test_pred_lc))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          c#       0.66      0.79      0.72      7947\n",
            "       c_cpp       0.69      0.79      0.74      5666\n",
            "        java       0.84      0.78      0.81      7675\n",
            "  javascript       0.80      0.83      0.81      7586\n",
            "         php       0.86      0.79      0.82      6505\n",
            "      python       0.92      0.80      0.86      4205\n",
            "           r       0.79      0.54      0.65       711\n",
            "        ruby       0.92      0.79      0.85      2005\n",
            "       swift       0.91      0.61      0.73       708\n",
            "          vb       0.88      0.41      0.56       714\n",
            "\n",
            "    accuracy                           0.78     43722\n",
            "   macro avg       0.83      0.71      0.76     43722\n",
            "weighted avg       0.80      0.78      0.79     43722\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lNeMmj5D3dOT",
        "colab_type": "code",
        "colab": {},
        "outputId": "08b85691-5123-4451-eca6-1429f21c0248"
      },
      "source": [
        "rf_lc_model = RandomForestClassifier(random_state=0, n_estimators=100)\n",
        "rf_lc_model.fit(X_train_tfidf_lc, y_train_lc)\n",
        "\n",
        "y_test_pred_lc_rf = rf_lc_model.predict(X_test_tfidf_lc)\n",
        "test_accuracy_lc_rf = accuracy_score(y_test_lc, y_test_pred_lc_rf)\n",
        "print('Test accuracy = {}'.format(test_accuracy_lc_rf))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy = 0.7537395361602854\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yIBY6JjK3dOX",
        "colab_type": "code",
        "colab": {},
        "outputId": "13455be3-a5e8-4772-8d63-ba1ba6186a65"
      },
      "source": [
        "print(classification_report(y_test_lc, y_test_pred_lc_rf))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          c#       0.64      0.74      0.69      7947\n",
            "       c_cpp       0.62      0.76      0.68      5666\n",
            "        java       0.82      0.74      0.78      7675\n",
            "  javascript       0.76      0.82      0.79      7586\n",
            "         php       0.83      0.77      0.80      6505\n",
            "      python       0.92      0.76      0.83      4205\n",
            "           r       0.73      0.48      0.58       711\n",
            "        ruby       0.93      0.77      0.84      2005\n",
            "       swift       0.92      0.59      0.72       708\n",
            "          vb       0.88      0.38      0.53       714\n",
            "\n",
            "    accuracy                           0.75     43722\n",
            "   macro avg       0.81      0.68      0.72     43722\n",
            "weighted avg       0.77      0.75      0.76     43722\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X-QKanWX3dOZ",
        "colab_type": "code",
        "colab": {},
        "outputId": "1881f232-11bc-46e5-a2d3-d37d32550cd4"
      },
      "source": [
        "xgb_lc = XGBClassifier(objective=\"multi:softprob\", random_state=0)\n",
        "\n",
        "xgb_lc.fit(X_train_tfidf_lc, y_train_lc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
              "              importance_type='gain', interaction_constraints='',\n",
              "              learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
              "              min_child_weight=1, missing=nan, monotone_constraints='()',\n",
              "              n_estimators=100, n_jobs=0, num_parallel_tree=1,\n",
              "              objective='multi:softprob', random_state=0, reg_alpha=0,\n",
              "              reg_lambda=1, scale_pos_weight=None, subsample=1,\n",
              "              tree_method='exact', validate_parameters=1, verbosity=None)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "96esofsD3dOc",
        "colab_type": "code",
        "colab": {},
        "outputId": "d98acf68-56a4-4bc9-e592-a2bd44c3cb13"
      },
      "source": [
        "y_test_pred_lc_xgb = xgb_lc.predict(X_test_tfidf_lc)\n",
        "test_accuracy_lc_xgb = accuracy_score(y_test_lc, y_test_pred_lc_xgb)\n",
        "print('Test accuracy = {}'.format(test_accuracy_lc_xgb))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy = 0.7319198572800878\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PpghZz6u3dOd",
        "colab_type": "code",
        "colab": {},
        "outputId": "d10dc2a4-646c-4108-96ce-d763a880edcc"
      },
      "source": [
        "print(classification_report(y_test_lc, y_test_pred_lc_xgb))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          c#       0.47      0.88      0.62      7947\n",
            "       c_cpp       0.71      0.62      0.66      5666\n",
            "        java       0.94      0.68      0.79      7675\n",
            "  javascript       0.80      0.77      0.79      7586\n",
            "         php       0.91      0.73      0.81      6505\n",
            "      python       0.97      0.75      0.84      4205\n",
            "           r       0.78      0.48      0.60       711\n",
            "        ruby       0.94      0.77      0.85      2005\n",
            "       swift       0.87      0.60      0.71       708\n",
            "          vb       0.90      0.42      0.57       714\n",
            "\n",
            "    accuracy                           0.73     43722\n",
            "   macro avg       0.83      0.67      0.72     43722\n",
            "weighted avg       0.80      0.73      0.74     43722\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CeBnJLoh3dOg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "outputId": "c75ef0a4-5063-48e0-c0cd-e32a443d216b"
      },
      "source": [
        "title_lens = [len(x) for x in X_lc]\n",
        "plot_counter(Counter(title_lens), 'Length', 'Title lengths histogram')"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cI36s1t-3dOj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "label_encoder = LabelEncoder()\n",
        "\n",
        "y_lc_enc = label_encoder.fit_transform(y_lc)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rxuiMAgA3dOl",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "de2aea13-26af-426f-bea7-b142c8190523"
      },
      "source": [
        "y_lc_enc"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 1, 3, ..., 2, 1, 2])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7x-4tWHY3dOn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_lc_nn = to_categorical(y_lc_enc)"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m0h7Igep3dOp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "outputId": "ed409d0a-a131-4546-9fd4-8bb57d94ec2c"
      },
      "source": [
        "y_lc_nn"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 1., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       ...,\n",
              "       [0., 0., 1., ..., 0., 0., 0.],\n",
              "       [0., 1., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 1., ..., 0., 0., 0.]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "phUGXgnS3dOr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "4b5d2cd1-ed7f-4d3b-ba0e-1a55191469a5"
      },
      "source": [
        "MAX_NB_WORDS = 50000\n",
        "tokenizer_nn = Tokenizer(num_words=MAX_NB_WORDS, filters='!\"$%&()*,-./:;<=>?@[\\]^_`{|}~', lower=True)\n",
        "\n",
        "tokenizer_nn.fit_on_texts(X_lc)\n",
        "word_index = tokenizer_nn.word_index\n",
        "print('Number of unique tokens:', len(word_index))"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of unique tokens: 42493\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lLtDOd0S3dOt",
        "colab_type": "code",
        "colab": {},
        "outputId": "e1e3d61b-2816-45ab-9890-100789bd301e"
      },
      "source": [
        "MAX_SEQUENCE_LENGTH = 120\n",
        "X_lc_nn = tokenizer_nn.texts_to_sequences(X_lc)\n",
        "X_lc_nn = pad_sequences(X_lc_nn, maxlen=MAX_SEQUENCE_LENGTH)\n",
        "print('Shape of X:', X_lc_nn.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shape of X: (218609, 120)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oaYnJQOR3dOx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train_lc_nn, X_test_lc_nn, y_train_lc_nn, y_test_lc_nn = train_test_split(X_lc_nn, y_lc_nn, \n",
        "                                                                            test_size=0.2, random_state=0, stratify=y_lc)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N5bXfB9e3dOz",
        "colab_type": "code",
        "colab": {},
        "outputId": "5195ae8e-c709-413a-e9e4-d4950880ae5a"
      },
      "source": [
        "print('Shape of X train:', X_train_lc_nn.shape)\n",
        "print('Shape of X test:', X_test_lc_nn.shape)\n",
        "print('Shape of y train:', y_train_lc_nn.shape)\n",
        "print('Shape of y test:', y_test_lc_nn.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shape of X train: (174887, 120)\n",
            "Shape of X test: (43722, 120)\n",
            "Shape of y train: (174887, 10)\n",
            "Shape of y test: (43722, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "iyqUa10E3dO3",
        "colab_type": "code",
        "colab": {},
        "outputId": "1697a240-d109-4d13-be23-a079f3fd6eb0"
      },
      "source": [
        "EMBEDDING_DIM = 100\n",
        "\n",
        "nn_model = Sequential()\n",
        "nn_model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM))\n",
        "nn_model.add(Bidirectional(LSTM(100, dropout=0.5, recurrent_dropout=0.5)))\n",
        "nn_model.add(Dense(10, activation='softmax'))\n",
        "nn_model.compile(loss='categorical_crossentropy', optimizer='adam', \n",
        "                 metrics=['accuracy', AUC(name='auc'), Precision(name='precision'), Recall(name='recall')])\n",
        "\n",
        "es = EarlyStopping(monitor='val_recall', patience=3, restore_best_weights=True)\n",
        "nn_history = nn_model.fit(X_train_lc_nn, y_train_lc_nn, epochs=10, batch_size=64, validation_split=0.1, callbacks=[es])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "C:\\Users\\Elizaveta_Kapitonova\\AppData\\Roaming\\Python\\Python37\\site-packages\\tensorflow_core\\python\\framework\\indexed_slices.py:424: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.\n",
            "  \"Converting sparse IndexedSlices to a dense Tensor of unknown shape. \"\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Train on 157398 samples, validate on 17489 samples\n",
            "Epoch 1/10\n",
            "157398/157398 [==============================] - 2979s 19ms/step - loss: 0.8485 - accuracy: 0.7246 - auc: 0.9566 - precision: 0.8885 - recall: 0.6160 - val_loss: 0.6111 - val_accuracy: 0.8024 - val_auc: 0.9769 - val_precision: 0.8998 - val_recall: 0.7372\n",
            "Epoch 2/10\n",
            "157398/157398 [==============================] - 2988s 19ms/step - loss: 0.5723 - accuracy: 0.8171 - auc: 0.9795 - precision: 0.8963 - recall: 0.7565 - val_loss: 0.5894 - val_accuracy: 0.8067 - val_auc: 0.9784 - val_precision: 0.8924 - val_recall: 0.7562\n",
            "Epoch 3/10\n",
            "157398/157398 [==============================] - 2980s 19ms/step - loss: 0.5057 - accuracy: 0.8366 - auc: 0.9837 - precision: 0.9016 - recall: 0.7877 - val_loss: 0.5870 - val_accuracy: 0.8105 - val_auc: 0.9785 - val_precision: 0.8827 - val_recall: 0.7687\n",
            "Epoch 4/10\n",
            "157398/157398 [==============================] - 3005s 19ms/step - loss: 0.4597 - accuracy: 0.8506 - auc: 0.9863 - precision: 0.9059 - recall: 0.8088 - val_loss: 0.5895 - val_accuracy: 0.8107 - val_auc: 0.9781 - val_precision: 0.8773 - val_recall: 0.7703\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7djATn8q3dO5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plot_graphs(history, metric):\n",
        "    plt.plot(history.history[metric])\n",
        "    plt.plot(history.history['val_' + metric], '')\n",
        "    plt.xlabel(\"Epochs\")\n",
        "    plt.ylabel(metric)\n",
        "    plt.legend([metric, 'val_' + metric])\n",
        "    plt.title(metric.upper())\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7c4rzsMN3dO7",
        "colab_type": "code",
        "colab": {},
        "outputId": "ba56d3b5-1bc0-45d4-b4d5-d173ab5cda02"
      },
      "source": [
        "plot_graphs(nn_history, 'accuracy')\n",
        "plot_graphs(nn_history, 'auc')\n",
        "plot_graphs(nn_history, 'precision')\n",
        "plot_graphs(nn_history, 'recall')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M3WaEFFT3dPA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_test_pred_nn = nn_model.predict(X_test_lc_nn)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YkK0GgI23dPD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_test_pred_nn_enc = [np.argmax(p) for p in y_test_pred_nn]\n",
        "y_test_nn_enc = [np.argmax(p) for p in y_test_lc_nn]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0w9Nc55h3dPE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_test_pred_nn_tags = label_encoder.inverse_transform(y_test_pred_nn_enc)\n",
        "y_test_nn_tags = label_encoder.inverse_transform(y_test_nn_enc)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X7Hl-vrJ3dPH",
        "colab_type": "code",
        "colab": {},
        "outputId": "a4256390-d7b3-4675-a9ff-a2525f39b15a"
      },
      "source": [
        "y_test_pred_nn_tags"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['javascript', 'java', 'c#', ..., 'c_cpp', 'java', 'c#'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wDTykqkD3dPJ",
        "colab_type": "code",
        "colab": {},
        "outputId": "87a89bfd-6f3b-4e2b-9f7f-39f4855f82cc"
      },
      "source": [
        "test_accuracy_lc_nn = accuracy_score(y_test_nn_tags, y_test_pred_nn_tags)\n",
        "print('Test accuracy = {}'.format(test_accuracy_lc_nn))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test accuracy = 0.8015644298065048\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0ujER6Ob3dPL",
        "colab_type": "code",
        "colab": {},
        "outputId": "ce76b061-e867-436a-f0d2-22b76288dda0"
      },
      "source": [
        "print(classification_report(y_test_nn_tags, y_test_pred_nn_tags))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "          c#       0.75      0.80      0.78      7947\n",
            "       c_cpp       0.76      0.82      0.79      5666\n",
            "        java       0.82      0.80      0.81      7675\n",
            "  javascript       0.77      0.86      0.81      7586\n",
            "         php       0.83      0.80      0.81      6505\n",
            "      python       0.88      0.81      0.84      4205\n",
            "           r       0.89      0.76      0.82       711\n",
            "        ruby       0.91      0.80      0.85      2005\n",
            "       swift       0.94      0.58      0.72       708\n",
            "          vb       0.92      0.41      0.57       714\n",
            "\n",
            "    accuracy                           0.80     43722\n",
            "   macro avg       0.85      0.74      0.78     43722\n",
            "weighted avg       0.81      0.80      0.80     43722\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OLiwbiMD3dPM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "tag_classifier = nn_model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kwVfDFd_9S2d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# TODO: table with metrics"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "brfK8eVN3dPP",
        "colab_type": "text"
      },
      "source": [
        "Dump the classifier to use it in the running bot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q9Sb2X6O3dPQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pickle.dump(tag_classifier, open(RESOURCE_PATH['TAG_CLASSIFIER'], 'wb'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8As7n1jy3dPR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pickle.dump(label_encoder, open(RESOURCE_PATH['TAG_LABEL_ENCODER'], 'wb'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8H2eVmad1m26",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pickle.dump(tokenizer_nn, open(RESOURCE_PATH['TITLE_TOKENIZER'], 'wb'))\n"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B5ZdSLhA3dPS",
        "colab_type": "text"
      },
      "source": [
        "## Part II. Ranking  questions with embeddings"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Enf66kqP3dPS",
        "colab_type": "text"
      },
      "source": [
        "To find a relevant answer (a thread from StackOverflow) on a question you will use vector representations to calculate similarity between the question and existing threads. We already had `question_to_vec` function from the assignment 3, which can create such a representation based on word vectors. \n",
        "\n",
        "However, it would be costly to compute such a representation for all possible answers in *online mode* of the bot (e.g. when bot is running and answering questions from many users). This is the reason why you will create a *database* with pre-computed representations. These representations will be arranged by non-overlaping tags (programming languages), so that the search of the answer can be performed only within one tag each time. This will make our bot even more efficient and allow not to store all the database in RAM. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Udasg-hJ3dPS",
        "colab_type": "text"
      },
      "source": [
        "Load StarSpace embeddings which were trained on Stack Overflow posts. These embeddings were trained in *supervised mode* for duplicates detection on the same corpus that is used in search. We can account on that these representations will allow us to find closely related answers for a question. \n",
        "\n",
        "If for some reasons you didn't train StarSpace embeddings in the assignment 3, you can use [pre-trained word vectors](https://code.google.com/archive/p/word2vec/) from Google. All instructions about how to work with these vectors were provided in the same assignment. However, we highly recommend to use StarSpace's embeddings, because it contains more appropriate embeddings. If you chose to use Google's embeddings, delete the words, which are not in Stackoverflow data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t07Tkz603dPT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# starspace_embeddings, embeddings_dim = load_embeddings('data/word_embeddings.tsv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wZryZ3L9xyuT",
        "colab_type": "text"
      },
      "source": [
        "### Tags statistics"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "liD4ggUx3dPU",
        "colab_type": "text"
      },
      "source": [
        "Since we want to precompute representations for all possible answers, we need to load the whole posts dataset, unlike we did for the intent classifier:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1uSZ1XAL3dPU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "posts_df = stackoverflow_df"
      ],
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ihWQZIaU3dPW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "titles = posts_df['title'].values"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2WOaMz-E3dPZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "outputId": "6c22a4e1-47e2-4156-e4d3-230b4bd7d890"
      },
      "source": [
        "posts_df.head()"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>post_id</th>\n",
              "      <th>title</th>\n",
              "      <th>tag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9</td>\n",
              "      <td>Calculate age in C#</td>\n",
              "      <td>c#</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>16</td>\n",
              "      <td>Filling a DataSet or DataTable from a LINQ que...</td>\n",
              "      <td>c#</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>39</td>\n",
              "      <td>Reliable timer in a console application</td>\n",
              "      <td>c#</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>42</td>\n",
              "      <td>Best way to allow plugins for a PHP application</td>\n",
              "      <td>php</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>59</td>\n",
              "      <td>How do I get a distinct, ordered list of names...</td>\n",
              "      <td>c#</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   post_id                                              title  tag\n",
              "0        9                                Calculate age in C#   c#\n",
              "1       16  Filling a DataSet or DataTable from a LINQ que...   c#\n",
              "2       39            Reliable timer in a console application   c#\n",
              "3       42    Best way to allow plugins for a PHP application  php\n",
              "4       59  How do I get a distinct, ordered list of names...   c#"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Bi7smUd3dPa",
        "colab_type": "text"
      },
      "source": [
        "Look at the distribution of posts for programming languages (tags) and find the most common ones. \n",
        "You might want to use pandas [groupby](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html) and [count](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.count.html) methods:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kK0zgdNa3dPa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "counts_by_tag = Counter(posts_df['tag'])"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mjzyPVMl3dPc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 327
        },
        "outputId": "17dc62bf-6c9d-467b-8ac3-ec67e6f07386"
      },
      "source": [
        "plot_counter(counts_by_tag, 'Tags', 'Stackoverflow Tags Histogram')"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "2M2N83A13dPd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "outputId": "1a184430-957e-44be-eb64-449ffa48df8e"
      },
      "source": [
        "title_full_lens = [len(x) for x in titles]\n",
        "plot_counter(Counter(title_full_lens), 'Length', 'Full title lengths histogram')"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9L_Mtah83dPf",
        "colab_type": "text"
      },
      "source": [
        "Now for each `tag` you need to create two data structures, which will serve as online search index:\n",
        "* `tag_post_ids` — a list of post_ids with shape `(counts_by_tag[tag],)`. It will be needed to show the title and link to the thread;\n",
        "* `tag_vectors` — a matrix with shape `(counts_by_tag[tag], embeddings_dim)` where embeddings for each answer are stored.\n",
        "\n",
        "Implement the code which will calculate the mentioned structures and dump it to files. It should take several minutes to compute it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cDgTlrBbx6jJ",
        "colab_type": "text"
      },
      "source": [
        "### Bert embeddings"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bYaXgRVh3dPg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import tensorflow_hub as hub\n",
        "\n",
        "from official.modeling import tf_utils\n",
        "from official import nlp\n",
        "from official.nlp import bert\n",
        "\n",
        "import official.nlp.optimization\n",
        "import official.nlp.bert.bert_models\n",
        "import official.nlp.bert.configs\n",
        "import official.nlp.bert.run_classifier\n",
        "import official.nlp.bert.tokenization\n",
        "import official.nlp.data.classifier_data_lib\n",
        "import official.nlp.modeling.losses\n",
        "import official.nlp.modeling.models\n",
        "import official.nlp.modeling.networks"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IB1nt2PT5ABI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "outputId": "73e9b415-1d03-4661-a97c-40d1c07c33ba"
      },
      "source": [
        "bert_folder = \"gs://cloud-tpu-checkpoints/bert/keras_bert/uncased_L-12_H-768_A-12\"\n",
        "tf.io.gfile.listdir(bert_folder)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['bert_config.json',\n",
              " 'bert_model.ckpt.data-00000-of-00001',\n",
              " 'bert_model.ckpt.index',\n",
              " 'vocab.txt']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vaoF5cwu3dPh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# bert_folder = \"bert/\"\n",
        "# tf.io.gfile.listdir(bert_folder)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BrCNQ6Dm3dPj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "bbed2855-debe-4696-a5bd-e0e85a901fa1"
      },
      "source": [
        "vocab_path = os.path.join(bert_folder, \"vocab.txt\")\n",
        "tokenizer = bert.tokenization.FullTokenizer(vocab_file=vocab_path, do_lower_case=True)\n",
        "\n",
        "print(\"Vocab size:\", len(tokenizer.vocab))"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Vocab size: 30522\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qOZOYF9M3dPk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "CLS = '[CLS]'\n",
        "SEP = '[SEP]'"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KaAalm193dPl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def encode_sentence(sent):\n",
        "    tokens = list(tokenizer.tokenize(sent))\n",
        "    cls_tokens_sep = [CLS] + tokens + [SEP]\n",
        "    return tokenizer.convert_tokens_to_ids(cls_tokens_sep)\n"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NusxpC5D3dPn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def pad_sentence(sent, maxlen):\n",
        "    pad_len = maxlen - len(sent)\n",
        "    pad_zeros = [0] * pad_len\n",
        "    return sent + pad_zeros"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ecyfdNab3dPp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def bert_encode(data, tokenizer):\n",
        "    encoded = [encode_sentence(s) for s in data]\n",
        "    max_sent_len = max([len(s) for s in encoded])\n",
        "    enc_sentences = tf.ragged.constant([pad_sentence(s, max_sent_len) for s in encoded])\n",
        "    \n",
        "    input_word_ids = enc_sentences\n",
        "    input_mask = tf.ones_like(input_word_ids).to_tensor()\n",
        "    input_type_ids = tf.zeros_like(enc_sentences).to_tensor()\n",
        "    \n",
        "    return {\n",
        "      'input_word_ids': input_word_ids.to_tensor(),\n",
        "      'input_mask': input_mask,\n",
        "      'input_type_ids': input_type_ids\n",
        "    }\n",
        "    "
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5Y35lKmM3dPs",
        "colab_type": "code",
        "colab": {},
        "outputId": "c83ec51c-afaf-4822-a6d5-e3727746c66e"
      },
      "source": [
        "# a = bert_encode(['I love you', 'You are so cool', 'I like cool weather very much'], tokenizer)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[101, 1045, 2293, 2017, 102]\n",
            "5\n",
            "3\n",
            "[101, 2017, 2024, 2061, 4658, 102]\n",
            "6\n",
            "2\n",
            "[101, 1045, 2066, 4658, 4633, 2200, 2172, 102]\n",
            "8\n",
            "0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o1b5rDBd3dPv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "outputId": "1e76e313-0e34-4e6a-9a38-a127ce3dd719"
      },
      "source": [
        "bert_config_file = os.path.join(bert_folder, \"bert_config.json\")\n",
        "config_dict = json.loads(tf.io.gfile.GFile(bert_config_file).read())\n",
        "\n",
        "bert_config = bert.configs.BertConfig.from_dict(config_dict)\n",
        "\n",
        "config_dict"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'attention_probs_dropout_prob': 0.1,\n",
              " 'hidden_act': 'gelu',\n",
              " 'hidden_dropout_prob': 0.1,\n",
              " 'hidden_size': 768,\n",
              " 'initializer_range': 0.02,\n",
              " 'intermediate_size': 3072,\n",
              " 'max_position_embeddings': 512,\n",
              " 'num_attention_heads': 12,\n",
              " 'num_hidden_layers': 12,\n",
              " 'type_vocab_size': 2,\n",
              " 'vocab_size': 30522}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2c4z08sq3dPx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "bert_classifier, bert_encoder = bert.bert_models.classifier_model(bert_config, num_labels=10)"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OKYM7UTnBirh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "BATCH_SIZE = 128"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "835tOJnk6dev",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def split_to_batches(data):\n",
        "  number_of_batches = int(np.ceil(len(data) / BATCH_SIZE))\n",
        "  batches = []\n",
        "  for i in range(0, number_of_batches):\n",
        "    batch = data[i * BATCH_SIZE : (i + 1) * BATCH_SIZE]\n",
        "    batches.append(batch)\n",
        "  return batches"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nq0E2f2u3dQb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "9768966a-aba5-4860-9e6c-ab292f091466"
      },
      "source": [
        "os.makedirs(RESOURCE_PATH['THREAD_EMBEDDINGS_FOLDER'], exist_ok=True)\n",
        "embeddings_dim = 768\n",
        "for tag, count in counts_by_tag.items():\n",
        "    tag_posts = posts_df[posts_df['tag'] == tag]\n",
        "    \n",
        "    tag_post_ids = tag_posts['post_id']\n",
        "    \n",
        "    tag_vectors = np.zeros((count, embeddings_dim), dtype=np.float32)\n",
        "    \n",
        "    batched_tag_titles = split_to_batches(tag_posts['title'])\n",
        "    for i, batch in enumerate(batched_tag_titles):\n",
        "        encoded_input = bert_encode(batch, tokenizer)\n",
        "        pooled_output, sequence_output = bert_encoder(encoded_input)\n",
        "        tag_vectors[i * BATCH_SIZE : (i + 1) * BATCH_SIZE, :] = np.squeeze(pooled_output)\n",
        "\n",
        "    # Dump post ids and vectors to a file.\n",
        "    print(tag, 'comeplted')\n",
        "    filename = os.path.join(RESOURCE_PATH['THREAD_EMBEDDINGS_FOLDER'], os.path.normpath('%s.pkl' % tag))\n",
        "    pickle.dump((tag_post_ids, tag_vectors), open(filename, 'wb'))"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "c# comeplted\n",
            "php comeplted\n",
            "c_cpp comeplted\n",
            "python comeplted\n",
            "ruby comeplted\n",
            "java comeplted\n",
            "javascript comeplted\n",
            "vb comeplted\n",
            "r comeplted\n",
            "swift comeplted\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SD6nCpFnfHln",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "file_paths = [] \n",
        "for root, directories, files in os.walk(RESOURCE_PATH['THREAD_EMBEDDINGS_FOLDER']): \n",
        "    for filename in files:\n",
        "      filepath = os.path.join(root, filename)\n",
        "      file_paths.append(filepath) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EkY-Zbz-emLO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from zipfile import ZipFile \n",
        "\n",
        "with ZipFile(RESOURCE_PATH['THREAD_EMBEDDINGS_FOLDER'] + '_archive.zip','w') as zip:\n",
        "  for file in file_paths: \n",
        "    zip.write(file)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "voLivw9Xuq4W",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "42258d53-fef4-424e-9ec3-164869424abc"
      },
      "source": [
        "from google.colab import files\n",
        "\n",
        "files.download(RESOURCE_PATH['THREAD_EMBEDDINGS_FOLDER'] + '_archive.zip')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_03fc9e5e-fba3-4eeb-8247-434fc8c22002\", \"thread_embeddings_by_tags_archive.zip\", 6723205690)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ptJFEpMouHcG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "bee191ce-faae-4f78-bb81-f317d689f6b7"
      },
      "source": [
        "tag_vectors.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(34809, 768)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-ADBgSydyPj-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6a424e75-3342-4208-b760-02b1d09d1433"
      },
      "source": [
        "cosine_similarity([[1, 1, 1, 1]], [[1.2, 1.9, 1.02, 1]])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.96140106]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2aAa-MakuRbT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yMU7lVYk3dQc",
        "colab_type": "text"
      },
      "source": [
        "## Part III. Putting all together"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X3MlnXPR3dQd",
        "colab_type": "text"
      },
      "source": [
        "Now let's combine everything that we have done and enable the bot to maintain a dialogue. We will teach the bot to sequentially determine the intent and, depending on the intent, select the best answer. As soon as we do this, we will have the opportunity to chat with the bot and check how well it answers questions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kH9Omb0t3dQd",
        "colab_type": "text"
      },
      "source": [
        "Implement Dialogue Manager that will generate the best answer. In order to do this, you should open *dialogue_manager.py* and fill in the gaps."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "af9s5bS1YxmH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class ThreadRanker(object):\n",
        "    def __init__(self, paths):\n",
        "        # self.word_embeddings, self.embeddings_dim = load_embeddings(paths['WORD_EMBEDDINGS'])\n",
        "        self.thread_embeddings_folder = paths['THREAD_EMBEDDINGS_FOLDER']\n",
        "\n",
        "    def __load_embeddings_by_tag(self, tag_name):\n",
        "        embeddings_path = os.path.join(self.thread_embeddings_folder, tag_name + \".pkl\")\n",
        "        thread_ids, thread_embeddings = unpickle_file(embeddings_path)\n",
        "        return thread_ids, thread_embeddings\n",
        "\n",
        "    def get_best_thread(self, question, tag_name):\n",
        "        \"\"\" Returns id of the most similar thread for the question.\n",
        "            The search is performed across the threads with a given tag.\n",
        "        \"\"\"\n",
        "        thread_ids, thread_embeddings = self.__load_embeddings_by_tag(tag_name)\n",
        "        \n",
        "        encoded_question_input = bert_encode(question, tokenizer)\n",
        "        pooled_question_emb, sequence_question_emb = bert_encoder(encoded_question_input)\n",
        "        best_thread = pairwise_distances_argmin(pooled_question_emb, thread_embeddings)\n",
        "        \n",
        "        return thread_ids[best_thread]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J14erqqx3dQd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from chatterbot import ChatBot\n",
        "from chatterbot.trainers import ChatterBotCorpusTrainer\n",
        "\n",
        "\n",
        "class DialogueManager(object):\n",
        "    def __init__(self, paths):\n",
        "        print(\"Loading resources...\")\n",
        "\n",
        "        # Intent recognition:\n",
        "        self.intent_recognizer = unpickle_file(paths['INTENT_RECOGNIZER'])\n",
        "        self.tfidf_vectorizer = unpickle_file(paths['TFIDF_VECTORIZER'])\n",
        "        self.label_encoder = unpickle_file(paths['TAG_LABEL_ENCODER'])\n",
        "\n",
        "        self.ANSWER_TEMPLATE = 'I think its about %s\\nThis thread might help you: https://stackoverflow.com/questions/%s'\n",
        "\n",
        "        # Goal-oriented part:\n",
        "        self.tag_classifier = unpickle_file(paths['TAG_CLASSIFIER'])\n",
        "        self.thread_ranker = ThreadRanker(paths)\n",
        "        self.__init_chitchat_bot()\n",
        "\n",
        "    def __init_chitchat_bot(self):\n",
        "        \"\"\"Initializes self.chitchat_bot with some conversational model.\"\"\"\n",
        "        bot = ChatBot('SoBot')\n",
        "        trainer = ChatterBotCorpusTrainer(chatbot)\n",
        "        trainer.train(\"chatterbot.corpus.english\")\n",
        "        self.chitchat_bot = bot       \n",
        "        \n",
        "       \n",
        "    def generate_answer(self, question):\n",
        "        \"\"\"Combines stackoverflow and chitchat parts using intent recognition.\"\"\"\n",
        "\n",
        "        # Recognize intent of the question using `intent_recognizer`.\n",
        "        # Don't forget to prepare question and calculate features for the question.\n",
        "        # bot.get_response('I would like to book a flight.')\n",
        "        \n",
        "        prepared_question = text_prepare(qestion)\n",
        "        features = self.tfidf_vectorizer.transform(prepared_question)\n",
        "        intent = this.intent_recognizer.predict(features)\n",
        "\n",
        "        # Chit-chat part:   \n",
        "        if intent == 'dialogue':\n",
        "            # Pass question to chitchat_bot to generate a response.       \n",
        "            response = self.chitchat_bot.get_response(question)\n",
        "            return response\n",
        "        \n",
        "        # Goal-oriented part:\n",
        "        else:        \n",
        "            # Pass features to tag_classifier to get predictions.\n",
        "            \n",
        "            tag = #### YOUR CODE HERE ####\n",
        "            \n",
        "            # Pass prepared_question to thread_ranker to get predictions.\n",
        "            thread_id = #### YOUR CODE HERE ####\n",
        "            \n",
        "            return self.ANSWER_TEMPLATE % (tag, thread_id)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sIYAq13Q3dQe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dialogue_manager = ######### YOUR CODE HERE #############"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mp14JHdx3dQg",
        "colab_type": "text"
      },
      "source": [
        "Now we are ready to test our chat bot! Let's chat with the bot and ask it some questions. Check that the answers are reasonable."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8jaPICU03dQg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "questions = [\n",
        "    \"Hey\", \n",
        "    \"How are you doing?\", \n",
        "    \"What's your hobby?\", \n",
        "    \"How to write a loop in python?\",\n",
        "    \"How to delete rows in pandas?\",\n",
        "    \"python3 re\",\n",
        "    \"What is the difference between c and c++\",\n",
        "    \"Multithreading in Java\",\n",
        "    \"Catch exceptions C++\",\n",
        "    \"What is AI?\",\n",
        "]\n",
        "\n",
        "for question in questions:\n",
        "    answer = ######### YOUR CODE HERE #############\n",
        "    print('Q: %s\\nA: %s \\n' % (question, answer))"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}